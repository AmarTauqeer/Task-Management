{"version":3,"sources":["components/Todo/TodoForm.jsx","components/Todo/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoForm","addTodo","useState","value","setValue","handleSubmit","event","preventDefault","onSubmit","type","id","placeholder","onChange","target","style","width","className","onClick","TodoList","text","isCompleted","todos","setTodos","newTodos","map","todo","index","key","height","marginTop","textAlign","completeTodo","splice","console","log","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iTAuCeA,G,YApCE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACNC,mBAAS,IADH,mBACzBC,EADyB,KAClBC,EADkB,KAE1BC,EAAe,SAACC,GACpBA,EAAMC,iBACDJ,IACLF,EAAQE,GACRC,EAAS,MAMX,OACE,6BACE,0BAAMI,SAAUH,GACd,+CACA,2BACEI,KAAK,OACLC,GAAG,OACHP,MAAOA,EACPQ,YAAY,iBACZC,SAZa,SAACN,GACpBF,EAASE,EAAMO,OAAOV,QAYhBW,MAAO,CAAEC,MAAO,WAElB,2BACEN,KAAK,SACLC,GAAG,SACHM,UAAU,OACVb,MAAM,MACNc,QAASZ,QCyCJa,EArEE,WAAO,IAAD,EACKhB,mBAAS,CACjC,CACEiB,KAAM,oBACNC,aAAa,GAEf,CACED,KAAM,wBACNC,aAAa,GAEf,CACED,KAAM,6BACNC,aAAa,KAZI,mBACdC,EADc,KACPC,EADO,KAiCrB,OACE,yBAAKN,UAAU,aACb,kBAAC,EAAD,CAAUf,QAnBE,SAACkB,GACf,IAAMI,EAAQ,sBAAOF,GAAP,CAAc,CAAEF,KAAMA,EAAMC,aAAa,KACvDE,EAASC,MAmBNF,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACT,yBAAKC,IAAKD,GACR,yBAAKV,UAAU,MAAMF,MAAO,CAAEc,OAAQ,OAAQC,UAAW,QACvD,yBAAKb,UAAU,YACb,0BAAMA,UAAWS,EAAKL,YAAc,iBAAmB,IACpDK,EAAKN,OAGV,yBACEH,UAAU,WACVF,MAAO,CAAEgB,UAAW,QAASF,OAAQ,SAErC,2BACEnB,KAAK,SACLN,MAAM,WACNa,UAAU,cACVC,QAAS,kBAhCF,SAACS,GACpB,IAAMH,EAAQ,YAAOF,GACrBE,EAASG,GAAON,aAAeG,EAASG,GAAON,YAC/CE,EAASC,GA6BkBQ,CAAaL,MAE9B,4BACEV,UAAU,eACVC,QAAS,kBA9BH,SAACS,GACnB,IAAMH,EAAQ,YAAOF,GACrBE,EAASS,OAAON,EAAO,GACvBO,QAAQC,IAAIX,GACZD,EAASC,GA0BkBY,CAAYT,KAF7B,aC9CCU,MARf,WACE,OACE,yBAAKpB,UAAU,aACb,kBAAC,EAAD,QCIcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.beaff0dc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TodoForm.css\";\r\n\r\nconst TodoForm = ({ addTodo }) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (!value) return;\r\n    addTodo(value);\r\n    setValue(\"\");\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <h3>Task Management</h3>\r\n        <input\r\n          type=\"text\"\r\n          id=\"task\"\r\n          value={value}\r\n          placeholder=\"Enter new task\"\r\n          onChange={handleChange}\r\n          style={{ width: \"340px\" }}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          id=\"submit\"\r\n          className=\"fill\"\r\n          value=\"Add\"\r\n          onClick={handleSubmit}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from \"react\";\r\nimport \"./TodoList.css\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nconst TodoList = () => {\r\n  const [todos, setTodos] = useState([\r\n    {\r\n      text: \"Learn about React\",\r\n      isCompleted: false,\r\n    },\r\n    {\r\n      text: \"Meet friend for lunch\",\r\n      isCompleted: false,\r\n    },\r\n    {\r\n      text: \"Build really cool todo app\",\r\n      isCompleted: false,\r\n    },\r\n  ]);\r\n\r\n  const addTodo = (text) => {\r\n    const newTodos = [...todos, { text: text, isCompleted: false }];\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const completeTodo = (index) => {\r\n    const newTodos = [...todos];\r\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const handleClick = (index) => {\r\n    const newTodos = [...todos];\r\n    newTodos.splice(index, 1);\r\n    console.log(newTodos);\r\n    setTodos(newTodos);\r\n  };\r\n  return (\r\n    <div className=\"Todo-list\">\r\n      <TodoForm addTodo={addTodo} />\r\n\r\n      {todos.map((todo, index) => (\r\n        <div key={index}>\r\n          <div className=\"row\" style={{ height: \"40px\", marginTop: \"3px\" }}>\r\n            <div className=\"col-sm-3\">\r\n              <span className={todo.isCompleted ? \"strike-through\" : \"\"}>\r\n                {todo.text}\r\n              </span>\r\n            </div>\r\n            <div\r\n              className=\"col-sm-3\"\r\n              style={{ textAlign: \"right\", height: \"40px\" }}\r\n            >\r\n              <input\r\n                type=\"button\"\r\n                value=\"complete\"\r\n                className=\"lineThrough\"\r\n                onClick={() => completeTodo(index)}\r\n              />\r\n              <button\r\n                className=\"deleteButton\"\r\n                onClick={() => handleClick(index)}\r\n              >\r\n                X\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport TodoList from \"./components/Todo/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}